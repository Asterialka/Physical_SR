import torch
from .MST_Plus_Plus import MST_Plus_Plus


def model_generator(method, pretrained_model_path=None):
    if method == 'mst_plus_plus':
        model = MST_Plus_Plus().cpu()  # –ú–æ–¥–µ–ª—å —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–∞ CPU
    else:
        raise NameError(f'Method {method} is not defined!')  # –õ—É—á—à–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
    
    if pretrained_model_path is not None:
        print(f'Loading model from {pretrained_model_path}')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –Ω–∞ CPU (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ GPU)
        checkpoint = torch.load(pretrained_model_path, map_location='cpu')  # üî• –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!
        
        # –£–¥–∞–ª—è–µ–º 'module.', –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ DataParallel/DDP
        state_dict = {
            k.replace('module.', ''): v 
            for k, v in checkpoint['state_dict'].items()
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –≤ –º–æ–¥–µ–ª—å
        model.load_state_dict(state_dict, strict=True)
    
    return model